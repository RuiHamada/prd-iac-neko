# PR Check Workflow
# Validates changes on pull requests and provides Terraform plan output

name: PR Check
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

concurrency:
  group: terraform-state-${{ github.repository }}
  cancel-in-progress: false

# Permissions needed for the workflow
permissions:
  contents: read           # Read repository contents
  pull-requests: write    # Comment on pull requests
  id-token: write         # For GCP authentication

env:
  TF_VERSION: "1.8.5"

jobs:
  # Detect which parts of the codebase have changed
  detect-changes:
    name: "Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      backlog-webhook-cloudrun: ${{ steps.changes.outputs.backlog-webhook-cloudrun }}
      terraform: ${{ steps.changes.outputs.terraform }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Detect File Changes"
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backlog-webhook-cloudrun:
              - 'cloudrun-app/backlog-webhook-cloudrun/**'
            terraform:
              - 'terraform/**'

  # Build and test the backlog webhook service if changed
  build-backlog-webhook:
    name: "Build Backlog Webhook Service"
    needs: detect-changes
    if: needs.detect-changes.outputs.backlog-webhook-cloudrun == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Build Docker Image for Testing"
        run: |
          echo "Building backlog-webhook-cloudrun service for testing..."
          docker build ./cloudrun-app/backlog-webhook-cloudrun -t backlog-webhook-cloudrun:${{ github.sha }}
          echo "‚úÖ Build successful"

  # Run Terraform plan and post results to PR
  terraform-plan:
    name: "Terraform Plan"
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.terraform == 'true' ||
      needs.detect-changes.outputs.backlog-webhook-cloudrun == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: "Configure GCP Credentials"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: "Initialize Terraform"
        run: terraform init
        working-directory: terraform/env

      - name: "Determine Image Tag"
        run: |
          echo "üîç Debug: GITHUB_ENV write test"
          echo "GITHUB_ENV path: '$GITHUB_ENV'"
          echo "Write test result:"
          echo "TEST_VAR=test_value" >> $GITHUB_ENV
          echo "Write result: $?"
          echo "File contents after test:"
          cat "$GITHUB_ENV" 2>/dev/null || echo "Failed to read GITHUB_ENV"
          
          if [ "${{ needs.detect-changes.outputs.backlog-webhook-cloudrun }}" == "true" ]; then
            echo "BACKLOG_WEBHOOK_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
            echo "üì¶ Using new image tag: ${IMAGE_TAG}"
          else
            echo "BACKLOG_WEBHOOK_TAG=${{ vars.BACKLOG_WEBHOOK_TAG }}" >> $GITHUB_ENV
            echo "üì¶ Using existing image tag: ${{ vars.BACKLOG_WEBHOOK_TAG }}"
          fi
          
          echo "Final GITHUB_ENV contents:"
          cat "$GITHUB_ENV" 2>/dev/null || echo "Failed to read GITHUB_ENV"

      - name: "Generate Terraform Plan"
        id: plan
        run: |
          echo "üìã Planning Terraform changes..."
          echo "üîÑ Overriding image tag: ${BACKLOG_WEBHOOK_TAG}"
          terraform plan \
            -var="backlog_webhook_image_tag=${BACKLOG_WEBHOOK_TAG}" \
            -var="backlog_webhook_secret_token=${BACKLOG_WEBHOOK_SECRET_TOKEN}" \
            -no-color \
            -detailed-exitcode
        working-directory: terraform/env
        env:
          # Repository Variables (TF_VAR_ prefix automatically read by Terraform)
          TF_VAR_project_id: ${{ vars.TF_VAR_PROJECT_ID }}
          TF_VAR_suffix: ${{ vars.TF_VAR_SUFFIX }}
          TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
          TF_VAR_cert_project_number: ${{ vars.TF_VAR_CERT_PROJECT_NUMBER }}
          TF_VAR_lb_ip_address: ${{ vars.TF_VAR_LB_IP_ADDRESS }}
          TF_VAR_dns_zone_name: ${{ vars.TF_VAR_DNS_ZONE_NAME }}
          # Repository Secrets
          BACKLOG_WEBHOOK_SECRET_TOKEN: ${{ secrets.BACKLOG_WEBHOOK_SECRET_TOKEN }}
        continue-on-error: true

      - name: "Comment PR with Plan Results"
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            ## Terraform Plan üìã

            **Changed Components:**
            - Backlog Webhook Service: ${{ needs.detect-changes.outputs.backlog-webhook-cloudrun == 'true' && '‚úÖ Changed' || '‚è≠Ô∏è No changes' }}
            - Terraform Configuration: ${{ needs.detect-changes.outputs.terraform == 'true' && '‚úÖ Changed' || '‚è≠Ô∏è No changes' }}

            **Image Tags:**
            - Backlog Webhook: \`${process.env.BACKLOG_WEBHOOK_TAG}\`

            <details>
            <summary>üìä Show Terraform Plan Output</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            **Plan Status:** ${{ steps.plan.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## Terraform Plan')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

      - name: "Fail if Plan Failed"
        if: steps.plan.outcome == 'failure'
        run: |
          echo "‚ùå Terraform plan failed"
          exit 1
