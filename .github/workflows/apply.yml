# CI/CD Pipeline for Main Branch
# Builds and deploys infrastructure changes when code is pushed to main

name: CI/CD Pipeline
on:
  push:
    branches: [main]

concurrency:
  group: terraform-state-${{ github.repository }}
  cancel-in-progress: false

# Permissions needed for the workflow
permissions:
  contents: read           # Read repository contents
  actions: write          # Update repository variables
  id-token: write         # For GCP authentication

env:
  TF_VERSION: "1.8.5"

jobs:
  # Detect which parts of the codebase have changed
  detect-changes:
    name: "Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      backlog-webhook-cloudrun: ${{ steps.changes.outputs.backlog-webhook-cloudrun }}
      terraform: ${{ steps.changes.outputs.terraform }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "Detect File Changes"
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backlog-webhook-cloudrun:
              - 'cloudrun-app/backlog-webhook-cloudrun/**'
            terraform:
              - 'terraform/**'

  # Build and push the backlog webhook service if changed
  build-backlog-webhook:
    name: "Build & Push Backlog Webhook Service"
    needs: detect-changes
    if: needs.detect-changes.outputs.backlog-webhook-cloudrun == 'true'
    uses: ./.github/workflows/build-function.yml
    with:
      dockerfile_path: "./cloudrun-app/backlog-webhook-cloudrun"
      image_name: "backlog-webhook-cloudrun"
      repo_variables_name: "BACKLOG_WEBHOOK_LATEST_IMAGE_TAG"
    secrets:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

  # Deploy infrastructure changes with Terraform
  terraform-apply:
    name: "Deploy Infrastructure"
    needs: [detect-changes, build-backlog-webhook]
    if: always() && !failure()
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: "Configure GCP Credentials"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: "Check Terraform Format"
        run: terraform fmt -check -recursive
        working-directory: terraform/env

      - name: "Initialize Terraform"
        run: terraform init -no-color
        working-directory: terraform/env

      - name: "Validate Terraform Configuration"
        run: terraform validate
        working-directory: terraform/env

      - name: "Determine Image Tag"
        run: |
          echo "üîç Debug: Environment and file information"
          echo "GITHUB_ENV path: '$GITHUB_ENV'"
          echo "Current working directory: $(pwd)"
          echo "User: $(whoami)"
          echo "File permissions check:"
          ls -la "$GITHUB_ENV" 2>/dev/null || echo "GITHUB_ENV file does not exist yet"
          
          echo "üîç Debug: Input variables"
          echo "Change detection result: '${{ needs.detect-changes.outputs.backlog-webhook-cloudrun }}'"
          echo "IMAGE_TAG: '${IMAGE_TAG}'"
          echo "Repository variable BACKLOG_WEBHOOK_TAG: '${{ vars.BACKLOG_WEBHOOK_TAG }}'"
          
          if [ "${{ needs.detect-changes.outputs.backlog-webhook-cloudrun }}" == "true" ]; then
            echo "‚úÖ Branch: Using new image tag"
            echo "Writing: BACKLOG_WEBHOOK_TAG=${IMAGE_TAG}"
            echo "BACKLOG_WEBHOOK_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
            echo "Write result: $?"
            echo "üì¶ Using new image tag: ${IMAGE_TAG}"
          else
            echo "‚úÖ Branch: Using existing image tag"
            echo "Writing: BACKLOG_WEBHOOK_TAG=${{ vars.BACKLOG_WEBHOOK_TAG }}"
            echo "BACKLOG_WEBHOOK_TAG=${{ vars.BACKLOG_WEBHOOK_TAG }}" >> $GITHUB_ENV
            echo "Write result: $?"
            echo "üì¶ Using existing image tag: ${{ vars.BACKLOG_WEBHOOK_TAG }}"
          fi
          
          echo "üîç Debug: Verifying GITHUB_ENV file after write"
          echo "File exists: $(test -f "$GITHUB_ENV" && echo 'YES' || echo 'NO')"
          echo "File size: $(wc -c < "$GITHUB_ENV" 2>/dev/null || echo 'ERROR')"
          echo "File contents:"
          cat "$GITHUB_ENV" 2>/dev/null || echo "Failed to read GITHUB_ENV file"

      - name: "Apply Terraform Changes"
        run: |
          echo "üöÄ Applying Terraform configuration..."
          echo "üîç Debug: Environment variables in Apply step"
          echo "BACKLOG_WEBHOOK_TAG: '${BACKLOG_WEBHOOK_TAG}'"
          echo "IMAGE_TAG: '${IMAGE_TAG}'"
          echo "All environment variables containing 'TAG':"
          env | grep -i tag || echo "No TAG variables found"
          echo "üîÑ Overriding image tag: ${BACKLOG_WEBHOOK_TAG}"
          terraform apply \
            -var="backlog_webhook_image_tag=${BACKLOG_WEBHOOK_TAG}" \
            -var="backlog_webhook_secret_token=${BACKLOG_WEBHOOK_SECRET_TOKEN}" \
            -auto-approve \
            -no-color
        working-directory: terraform/env
        env:
          # Repository Variables (TF_VAR_ prefix automatically read by Terraform)
          TF_VAR_project_id: ${{ vars.TF_VAR_PROJECT_ID }}
          TF_VAR_suffix: ${{ vars.TF_VAR_SUFFIX }}
          TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
          TF_VAR_cert_project_number: ${{ vars.TF_VAR_CERT_PROJECT_NUMBER }}
          TF_VAR_lb_ip_address: ${{ vars.TF_VAR_LB_IP_ADDRESS }}
          # Repository Secrets
          BACKLOG_WEBHOOK_SECRET_TOKEN: ${{ secrets.BACKLOG_WEBHOOK_SECRET_TOKEN }}

      - name: "Display Terraform Outputs"
        run: |
          echo "üìã Infrastructure deployment completed successfully!"
          echo ""
          echo "üîó Outputs:"
          terraform output
        working-directory: terraform/env

  # Notify deployment status
  notify-deployment:
    name: "Notify Deployment Status"
    needs: [terraform-apply]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "Deployment Success Notification"
        if: needs.terraform-apply.result == 'success'
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üöÄ Infrastructure is now up to date."

      - name: "Deployment Failure Notification"
        if: needs.terraform-apply.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs above for details."
          exit 1
